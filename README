.. -*-restructuredtext-*-

=========
ConCoord
=========

1 Overview
============

ConCoord is a novel coordination service that provides replication and
synchronization support for large-scale distributed systems. ConCoord
employs an object-oriented approach, in which the system actively
creates and maintains live replicas for user-provided objects. Through
ConCoord, the clients are able to access these replicated objects
transparently as if they are local objects. ConCoord uses these
replicated objects to implement coordination and synchronization
constructs in large-scale distributed systems, in effect establishing
a transparent way of providing a coordination service.

:Authors:
    - Deniz Altinbuken (deniz@systems.cs.cornell.edu)
    - Emin Gun Sirer (egs@systems.cs.cornell.edu)
:Version: 1.0.0
:Date: 2013-04-13

2 Requirements
================

The minimum requirements for ConCoord are::

  - python 2.7.2 or later
  - dnspython-1.9.4
  - msgpack-python

3 Installation
================

To build and install ConCoord, type::

  sudo python setup.py install

4 Tutorial
============

4.0 Getting Started
----------------------

To use ConCoord, first you need to create the local python object to
represent the state you want to replicate. To walk you through the
ConCoord approach, we will use one of the example coordination objects
we have provided, namely Counter. In the source distribution you can
locate the Counter object under concoord/object/counter.py. Once you
install ConCoord, you can create coordination objects and save them
anywhere in your filesystem. To demonstrate this, we will save
counter.py under /foo/counter.py.::

While creating ConCoord objects, the __init__ should not be used as a constructor. Replica nodes instantiate a given ConCoord object by calling __init__ without any arguments as soon as they go live, before the client makes any calls to the object. So, the user should specify a constructor method, __concoordinit__ by convention, to initialize the object with specific arguments and keep in mind that the __init__ method will be overwritten by binary rewriting when the proxy is created.

  class Counter:
    def __init__(self):
      pass

    def __concoordinit__(self, value):
     self.value = value

    def decrement(self):
      self.value -= 1

    def increment(self):
      self.value += 1

    def getvalue(self):
      return self.value

    def __str__(self):
      return "The counter value is %d" % self.value

4.1 Concoordifying Python Objects
---------------------------------

Once you have created the object, update your PYTHONPATH accordingly,
so that the objects can be found and imported::

  $ export PYTHONPATH=$PYTHONPATH:/foo/

To create concoord objects (to be used by the client and the server)
you can use::

  $ concoord object -o counter.Counter -s

Usage: concoord object -o objectname -s safe

where,
  objectname     := dotted of the object you want to concoordify
  safe 	         := boolean flag to include safety checks for the object

This script will create a proxy file under the directory that the
object resides (i.e. /foo/)::

/foo/counterproxy.py := the proxy that can be used by the client

4.2 Starting Nodes Manually
-----------------------------

To start the system you need to start at least one replica and one
acceptor. To support bootstrapping through DNS queries, you will also
need at least one nameserver node that has the necessary delegation
set up for the address to they are responsible for. Once the
nameserver node is set up and you can send dig queries to the
nameserver and learn the node to bootstrap, current set of nodes and
current set of replicas.

* For bootstrapping concoord requires at least one replica node. If a
  nameserver node is up, bootstrap can be the domainname for the
  concoord instance as new nodes can retrieve the bootstrap node
  automatically through DNS queries. If the nameserver is not running,
  bootstrap is a list of ipaddr:port pairs.

* Note that for the system to be able to add new nodes and accept
  client requests, there has to be at least one replica and one
  acceptor node present initially.

4.2.1 Starting Replica Nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To start the bootstrap replica node manually, use the following command::

  $ concoord replica -o counter.Counter

Note that you can specify the port and the address the replica binds
to with options -p and -a respectively. If not specified port defaults
to the first available port, randomly chosen between 14000 and 15000
and the address is determined automatically.

To start replica nodes to join an active concoord instance, use the
following command::

  $ concoord replica -o counter.Counter -b ipaddr:port

4.2.2 Starting Acceptor Nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To start an acceptor node manually, use the following command::

  $ concoord acceptor -b ipaddr:port

4.2.3 Starting Nameserver Nodes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are three ways you can run a ConCoord Nameserver.

* Standalone Nameserver Keeps track of the view and responds to DNS
  queries itself. Requires su privileges to bind to Port 53.

* Slave Nameserver Keeps track of the view and updates a master
  nameserver that answers to DNS queries on behalf of the slave
  nameserver. Requires an active master nameserver.

* Route53 Nameserver Keeps track of the view and updates an Amazon
  Route53 account. Amazon Route53 answers to DNS queries on behalf of
  the slave nameserver. Requires a ready-to-use Amazon Route53
  account.

4.2.3.1 Standalone Nameserver
+++++++++++++++++++++++++++++++

Before starting a standalone nameserver node manually, first make sure
that you have at least one replica and one acceptor running. Once your
replica and acceptor nodes are set up, you can start the nameserver to
answer queries for counterdomain as follows::

  $ sudo concoord nameserver -n counterdomain -o counter.Counter -b ipaddr:port -t 1

When you set up the nameserver delegations, you can send queries for
counterdomain and see the most current set of nodes as follows::

  $ dig -t a counterdomain                   # returns set of Replicas

  $ dig -t srv _concoord._tcp.counterdomain  # returns set of Replicas with ports

  $ dig -t txt counterdomain                 # returns set of all nodes

  $ dig -t ns counterdomain                  # returns set of nameservers

4.2.3.2 Slave Nameserver
++++++++++++++++++++++++++

Before starting a slave nameserver node manually, you should have a
master nameserver set up and running. The master nameserver should be
set up to answer the queries for its slave nameservers. We provide
OpenReplica Nameserver as a ready to deploy master nameserver and a
Nameserver Coordination Object in our example objects set to keep
track of slave nameserver information. Using this coordination object,
the master nameserver can keep track of its slave nameserver
delegations and the slave nameserver can update the master every time
the view of its system changes.

Once your master nameserver is set up, you can start the slave
nameserver as follows::

  $ concoord nameserver -n counterdomain -o counter.Counter -b ipaddr:port -t 2 -m masterdomain

When the slave nameserver starts running, you can send queries for
counterdomain and see the most current set of nodes as follows::

  $ dig -t a counterdomain                   # returns set of Replicas

  $ dig -t srv _concoord._tcp.counterdomain  # returns set of Replicas with ports

  $ dig -t txt counterdomain                 # returns set of all nodes

  $ dig -t ns counterdomain                  # returns set of nameservers

4.2.3.3 Amazon Route 53 Nameserver
++++++++++++++++++++++++++++++++++

Before starting a nameserver connected to Amazon Route 53, you should
have a Route 53 account set up and ready to receive requests. After
your Route 53 account is ready, the nameserver can update the master
every time the view of its system changes automatically.

To use Amazon Route 53 you can pass your credentials into the methods
that create connections or edit them in the configuration file.

* AWS_ACCESS_KEY_ID - Your AWS Access Key ID
* AWS_SECRET_ACCESS_KEY - Your AWS Secret Access Key

Once you make sure that your Route53 account is set up and your
credentials are updated, you can start the nameserver as follows::

  $ concoord nameserver -n counterdomain -o counter.Counter -b ipaddr:port -t 3 -o configfilepath

4.3 Starting Nodes Automatically
----------------------------------

We have a script we use for openreplica.org to start desired number of
nodes on PlanetLab servers automatically. This script is included for
your reference under concoord/openreplica/openreplicainitializer.py

* Note that the script requires host and user-specific credentials and
  you will have to edit the script for your own use.

* Note that the nameserver nodes are started in the slave mode.

You can run the script as follows::

  $ concoord initialize -s counterdomain -f /foo/counter.py -c Counter -r 3 -a 3 -n 3

4.4 Adding Nodes Automatically
--------------------------------

We also have a script we use for openreplica.org to add nodes on
PlanetLab servers automatically. This script is included for your
reference under concoord/openreplica/openreplicaaddnode.py

Note that the script requires host and user-specific credentials and
you will have to edit the script for your own use.

You can run the script as follows::

  $ concoord addnode -t nodetype -s counterdomain -f /foo/counter.py -c Counter -b bootstrap

where,
  nodetype := 1 for Acceptor, 2 for Replica, 3 for Nameserver
  bootstrap := ipaddr:port or domainname for an instance that has a nameserver

4.5 Connecting to ConCoord Objects
------------------------------------

Once you have concoord up and running for your object, it is easy to
access your object.

Now we will use the proxy object we generated at (3.1) and saved under
/foo/concoordproxy.py. Now you can import and use this proxy object in
your code. Depending on how you set your nameserver node up, you can
access your object with the ipaddr:port pair or the domainname.

  >>> from counterproxy import Counter
  >>> c = Counter(domainname)
  >>> c.increment()
  >>> c.increment()
  >>> c.getvalue()
  2

Note that the objects on the Replica side are initialized without
parameters. For you this has two implications:

  1) While implementing your objects you should create your __init__
  functions to be called without parameters.

  2) Keep in mind that when you initialize an object through the
  proxy, it only connects to the specified bootstrap, it does not
  reinitialize the object. This way multiple clients can connect to
  the same object using their proxies without reinitializing the
  object.

  3) At any point to reinitialize an object after it is deployed on
  replicas, you should call __concoordinit__ function:

  >>> from counterproxy import Counter
  >>> c = Counter(domainname)
  >>> c.increment()
  >>> c.__concoordinit__()
  >>> c.increment()
  >>> c.getvalue()
  1

5 ADVANCED TUTORIAL
=====================

5.1 Creating Source Bundles
-----------------------------

You can create bundles to use at the server and client sides using the
Makefile provided under concoord/

Remember to add the objects you have created in these bundles.

5.1.1 Creating A Server Bundle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a bundle that can run replica, acceptor and nameserver
nodes::

  $ make server

5.1.2 Creating A Client Bundle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a bundle that can run a client and connect to an existing
ConCoord instance:

  $ make client

5.2 Logging
-------------

We have two kinds of loggers for ConCoord::
* Console Logger
* Network Logger

Both of these loggers are included under utils.py. To start the
NetworkLogger, use the logdaemon.py on the host you want to keep the
Logger.

5.3 Synchronization & Threading
---------------------------------

ConCoord provides a distributed and fault-tolerant threading
library. The library includes:

*  Lock
*  RLock
*  Semaphore
*  BoundedSemaphore
*  Barrier
*  Condition

The implementations of distributed synchronization objects follow the
implementations in the Python threading library.

(6) HOMEPAGE
============

Visit http://openreplica.org to see concoord in action and to get more
information on concoord.

(7) CONTACT
===========

If you believe you have found a bug or have a problem you need
assistance with, you can get in touch with us by emailing
concoord@systems.cs.cornell.edu
